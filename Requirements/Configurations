### NOTABLES
1) Clone The Repository.
  - Remove the remote origin.
    - "git remote remove origin" 
    - Create a new repository in GitHub
      - Initialise Git.
      - Make the first commit.
      - Git remote add.
      - Git push to remote branch.
  
2) Scripts.
  - Scripts to run plugins for Pipeline.
  - Change the permissions to enable scripts
    - cat into permissions bash file
    - ```chmod +x *.sh``` (Makes files executable)
  - Executing Scripts
    - sh "name of scripts".
      - Jenkins, then docker, trivy scan, terraform
      - awscli (This will enable communication with AWS Cloud and its services).
      - kubectl, eksctl.

3) Jenkins CI PIPELINE.
  - Manage Jenkins PLugins
    - Eclipse, SonarQube, Stageview, Node JS, Docker(Docker Commons, Pipeline, API, Build Step)
  - Configure Email Notifications.
    - Create an app pasword in gmail.
    - Configure SMTP server (`smtp.gmail.com`), Default user e-mail suffix (`@gmail.com`), password - app password.
    - Include SMTP port access - `587`. 
    - Select TSL before test configuration.
  - Configure Extended E-Mail Notification.
    - SMTP server (`smtp.gmail.com`), SMTP port (`465`)
    - username with password option for email credentials.
    - Credentials :- login email with app password, description smpt-gmail.
  - Configure Runtime Environment.
    - jdk and nodejs versions.
  - Configure Docker.
    - Go to Credentials, System and docker credentials.
  - Configure SonarQube Server.
    - Get Docker scripts from file and create a sh script file.
    - Change the permissions for the `docker.sh` file.
      - chmod +x docker.sh
    - Enable port 9000 in the inbound rule on the Sonar Server.
    - Login into SonarQube,create jenkins token in account and security.
    - Head to Jenkins and Add SonarQube (jenkins token) credentials.
    - Create webhooks in SonarQube and add jenkins url with "sonarqube-webhook".
    - Configure SonarQube in System settings, enter the right credentials.  

4)  IAM User Credentials in AWS.
    - Create a user and attach policies.
    - Grant EC2, IAM, CloudFormation, VPC Access.

5)  Create EKS Cluster
    - Create a policy that allows access to EKS Cluster.
    - Once it is setup, view cluster `aws eks list-clusters`

6) Build Jenkins Job 
    - Create Pipeline, Discard Old Builds - "3".
    - Then Start Pipeline Build Officially.  
      - Set Git Credentials in Pipeline, create global credentials (git-token) and include git repo.
    - Enable OIDC -Provider.
      - create a using CLI.
      - it setup OIDC ro authenticate K8s services with IAM roles; Without this, servies will unable to access AWS resources securely.

7)

8)
